<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
     http://www.springframework.org/schema/beans  
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
     http://www.springframework.org/schema/context  
     http://www.springframework.org/schema/context/spring-context-3.0.xsd  
     http://www.springframework.org/schema/tx 
     http://www.springframework.org/schema/tx/spring-tx.xsd 
     http://www.springframework.org/schema/aop 
     http://www.springframework.org/schema/aop/spring-aop-3.0.xsd 
     http://www.springframework.org/schema/mvc  
     http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd 
     http://www.springframework.org/schema/task 
     http://www.springframework.org/schema/task/spring-task-3.2.xsd
     ">

	<!-- 加载配置文件-数据库连接properties文件 -->
	<context:property-placeholder location="classpath:db_config.properties" />
	<!-- 系统注解识别 -->
	<context:annotation-config />
	<!-- 指定spring注解注入层 -->
	<!-- 自动扫描DAO -->
	<context:component-scan base-package="com.mlog.sckeeper.mapper" />
	<context:component-scan base-package="com.mlog.sckeeper.dao" />
	<!-- 自动扫描SERVICE -->
	<context:component-scan base-package="com.mlog.sckeeper.service" />
	<!-- 自动扫描controller -->
	<context:component-scan base-package="com.mlog.sckeeper.controller" />

	<context:component-scan base-package="com.mlog.sckeeper.initialize" />
	<!-- 使请求被controller处理 -->
	<tx:annotation-driven />

	<!-- 数据库连接池管理 -->
	<bean id="c3p0DataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${db.driverClass}"></property>
		<property name="jdbcUrl" value="${db.jdbcUrl}"></property>
		<property name="user" value="${db.user}"></property>
		<property name="password" value="${db.password}"></property>
		<property name="initialPoolSize" value="${db.initialPoolSize}"></property>
		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="${db.maxIdleTime}"></property>
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="${db.maxPoolSize}"></property>
		<property name="minPoolSize" value="${db.minPoolSize}"></property>
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="${db.acquireIncrement}"></property>
		<!--两次连接中间隔时间，单位毫秒。Default: 1000 -->
		<property name="acquireRetryDelay" value="${db.acquireRetryDelay}"></property>
		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts" value="${db.acquireRetryAttempts}"></property>
		<!-- 获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 
			获取连接失败后该数据源将申明已断开并永久关闭。Default: false -->
		<property name="breakAfterAcquireFailure" value="${db.breakAfterAcquireFailure}"></property>
	</bean>
	<!-- mybatis 数据源配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="c3p0DataSource" />
		<property name="configLocation" value="classpath:MyBatis-Configuration.xml" />
	</bean>
	<!-- Mapper接口生成代理注入到Spring -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.mlog.sckeeper.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	<!-- 事务相关控制 -->
	<bean name="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="c3p0DataSource"></property>
	</bean>
	<!-- 对模型视图名称的解析，即在模型视图名称添加前后缀 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<bean id="gsonBuilder" init-method="disableHtmlEscaping" class="com.google.gson.GsonBuilder">
	</bean>

	<bean id="gson" class="com.google.gson.Gson" factory-bean="gsonBuilder"
		factory-method="create" />

	<bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
		<property name="config">
			<bean class="com.google.code.kaptcha.util.Config">
				<constructor-arg>
					<props>
						<prop key="kaptcha.border">yes</prop>
						<prop key="kaptcha.border.color">105,179,90</prop>
						<prop key="kaptcha.textproducer.font.color">blue</prop>
						<prop key="kaptcha.image.width">320</prop>
						<prop key="kaptcha.image.height">45</prop>
						<prop key="kaptcha.textproducer.font.size">30</prop>
						<prop key="kaptcha.session.key">code</prop>
						<prop key="kaptcha.textproducer.char.length">4</prop>
						<prop key="kaptcha.background.clear.from">green</prop>
						<prop key="kaptcha.background.clear.to">red</prop>
						<prop key="kaptcha.textproducer.font.names">宋体</prop>
						<!-- <prop key="kaptcha.textproducer.font.names">宋体,楷体,微软雅黑</prop> -->
						<!-- <prop key="kaptcha.obscurificator.impl">com.google.code.kaptcha.impl.ShadowGimpy</prop> -->

					</props>
				</constructor-arg>
			</bean>
		</property>
	</bean>

	<mvc:interceptors>
		<mvc:interceptor>
			<!-- 匹配的是url路径， 如果不配置或/**,将拦截所有的Controller -->
			<mvc:mapping path="/keeper/**" />
			<bean class="com.mlog.sckeeper.interceptor.SecretInterceptor"></bean>
		</mvc:interceptor>
	</mvc:interceptors>

	<mvc:resources location="/resource/" mapping="/resource/**" />
</beans>
